package com.example.gsoc_example_connect4;

import static com.example.gsoc_example_connect4.CommonUtilities.SERVER_URL;
import static com.example.gsoc_example_connect4.CommonUtilities.SENDER_ID;
import static com.example.gsoc_example_connect4.CommonUtilities.displayMessage;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.example.gsoc_example_connect4.R;
import com.google.android.gms.gcm.GoogleCloudMessaging;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.Log;

//Class used for communicating with the server.
public final class ServerUtilities {

    private static final int MAX_ATTEMPTS = 5;
    private static final int BACKOFF_MILLI_SECONDS = 2000;
    private static final Random random = new Random();
    
    // Tag used on log messages
    static final String TAG = "GSoC-Example-ServerUtilities";
    
    static List<String> getUsersList() {
    	ArrayList<String> l = new ArrayList<String>();
    	Log.i(TAG, "LELEEEGO!!!!!");
    	InputStream is = null;
    	String json = "";    	
    	
    	/*HttpClient client = new DefaultHttpClient();
        HttpUriRequest request = new HttpGet(SERVER_URL + "/getusers");
        HttpResponse response = null;
        try {
            response = client.execute(request);
            HttpEntity httpEntity = response.getEntity();
            is = httpEntity.getContent();
        } catch (IOException e1) {
        	Log.d("Buffer Error", "Error converting result " + e1.toString());;
        }
        Log.i(TAG, "LELEEEGO!!!!!");
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    is, "iso-8859-1"), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
            is.close();
            json = sb.toString();
        } catch (Exception e) {
            Log.e("Buffer Error", "Error converting result " + e.toString());
        }
        
        JSONObject jObj = null;
        try {
        	jObj = new JSONObject(json);
        	JSONArray jarray = jObj.getJSONArray("users");
        	for(int i=0;i < jarray.length();i++){ 
        	    l.add(jarray.getString(i));
        	}
        } catch (JSONException e) {
            Log.e("JSON Parser", "Error parsing data " + e.toString());
        }*/
    	HttpURLConnection connection;
    	OutputStreamWriter request;
    	try {
    	        URL url = null;
    	        String response = null;
    	        url = new URL(SERVER_URL + "/getusers");
    	        //create the connection
    	        connection = (HttpURLConnection) url.openConnection();
    	        connection.setDoOutput(true);
    	        connection.setRequestProperty("Content-Type",
    	                "application/x-www-form-urlencoded");
    	        //set the request method to GET
    	        connection.setRequestMethod("GET");
    	        //get the output stream from the connection you created
    	        request = new OutputStreamWriter(connection.getOutputStream());
    	        //write your data to the ouputstream
    	        request.write(parameters);
    	        request.flush();
    	        request.close();
    	        String line = "";
    	        //create your inputsream
    	        InputStreamReader isr = new InputStreamReader(
    	                connection.getInputStream());
    	        //read in the data from input stream, this can be done a variety of ways
    	        BufferedReader reader = new BufferedReader(isr);
    	        StringBuilder sb = new StringBuilder();
    	        while ((line = reader.readLine()) != null) {
    	            sb.append(line + "\n");
    	        }
    	        //get the string version of the response data
    	        response = sb.toString();
    	        //do what you want with the data now

    	        //always remember to close your input and output streams 
    	        isr.close();
    	        reader.close();
    	    } catch (IOException e) {
    	        Log.e("HTTP GET:", e.toString());
    	    }
    	 Log.i(TAG, "LELEEEGO!!!!!");
         try {
             BufferedReader reader = new BufferedReader(new InputStreamReader(
                     is, "iso-8859-1"), 8);
             StringBuilder sb = new StringBuilder();
             String line = null;
             while ((line = reader.readLine()) != null) {
                 sb.append(line + "\n");
             }
             is.close();
             json = sb.toString();
         } catch (Exception e) {
             Log.e("Buffer Error", "Error converting result " + e.toString());
         }
         
         JSONObject jObj = null;
         try {
         	jObj = new JSONObject(json);
         	JSONArray jarray = jObj.getJSONArray("users");
         	for(int i=0;i < jarray.length();i++){ 
         	    l.add(jarray.getString(i));
         	}
         } catch (JSONException e) {
             Log.e("JSON Parser", "Error parsing data " + e.toString());
         }
    	return l;
    }
    
    //Register this device in the server.
    static boolean register(final Context context,String regId,String user,String password) {
    	
    	String serverUrl = SERVER_URL + "/fromdevices/register";
    	Log.i(TAG, "registering device (regId = " + regId + ")");
        Map<String, String> params = new HashMap<String, String>();
        params.put("regId", regId);
        params.put("user", user);
        params.put("password", password);
        long backoff = BACKOFF_MILLI_SECONDS + random.nextInt(1000);

        // Once GCM returns a registration id, we need to register it in the
        // demo server. As the server might be down, we will retry it a couple
        // times.
        for (int i = 1; i <= MAX_ATTEMPTS; i++) {
            Log.d(TAG, "Attempt #" + i + " to register");
            try {
            	displayMessage(context, context.getString(
                        R.string.server_registering, i, MAX_ATTEMPTS));
                post(serverUrl, params);
                String message = context.getString(R.string.server_registered);
                displayMessage(context, message);
                return true;
            } catch (IOException e) {
                Log.e(TAG, "Failed to register on attempt " + i, e);
                if (i == MAX_ATTEMPTS) {
                    break;
                }
                try {
                    Log.d(TAG, "Sleeping for " + backoff + " ms before retry");
                    Thread.sleep(backoff);
                } catch (InterruptedException e1) {
                	// Activity finished before we complete - exit.
                    Log.d(TAG, "Thread interrupted: abort remaining retries!");
                    Thread.currentThread().interrupt();
                    return false;
                }
                // increase backoff exponentially.
                backoff *= 2;
            }
        }
        String message = context.getString(R.string.server_register_error,
                MAX_ATTEMPTS);
        displayMessage(context, message);
        return false;
    }
    

    // Send a message to the server.
    static void sendMsgToServer(final Context context,String regId, String user, String password , String msg , AtomicInteger msgId) {
    	SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(context);
    	Boolean useCCS = sharedPref.getBoolean("pref_useCCS", true);
    	Log.i(TAG, "sending msg to server");
        String serverUrl = SERVER_URL + "/fromdevices/messages";
        if(useCCS){
        	String id = Integer.toString(msgId.incrementAndGet());
        	Bundle params = new Bundle();
        	params.putString("message",msg);
            params.putString("regId", regId);
            params.putString("user",user);
            params.putString("password",password);
        	GoogleCloudMessaging gcm= GoogleCloudMessaging.getInstance(context);
        	try {
        		gcm.send(SENDER_ID + "@gcm.googleapis.com", id, 0, params);
        	} catch (IOException ex) {
        		displayMessage(context,"The message couldn't be sent.");
            }
        }
        else{
        	Map<String, String> params = new HashMap<String, String>();
            params.put("message",msg);
            params.put("regId", regId);
            params.put("user",user);
            params.put("password",password);
        	long backoff = BACKOFF_MILLI_SECONDS + random.nextInt(1000);
	        for (int i = 1; i <= MAX_ATTEMPTS; i++) {
	            try {
	            	post(serverUrl, params);
	            	displayMessage(context,"Message successfully sent.");
	                break;
	            } catch (IOException e) {
	            	if(i == MAX_ATTEMPTS){
	            		displayMessage(context,"The message couldn't be sent.");
	            		break;
	            	}
	            	try {
	                    Log.d(TAG, "Sleeping for " + backoff + " ms before retry");
	                    Thread.sleep(backoff);
	                } catch (InterruptedException e1) {
	                    Log.d(TAG, "Problem sleeping");
	                }
	            	// increase backoff exponentially.
	                if (backoff<200000) backoff*= 2;
	            }
	        }
        }
    }
    
    // Issue a POST request to the server.
    private static void post(String endpoint, Map<String, String> params)
            throws IOException {
        URL url;
        try {
            url = new URL(endpoint);
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException("invalid url: " + endpoint);
        }
        
        Iterator<Entry<String, String>> iterator = params.entrySet().iterator();
        
        JSONObject holder = new JSONObject();
        
        // constructs the POST body using the parameters
        while (iterator.hasNext()) {
            Entry<String, String> param = iterator.next();
            try {
            	holder.put(param.getKey(),param.getValue());
            } catch(JSONException e){
            	throw new IllegalArgumentException(e);	
            }     
        }
        
        String body = holder.toString();
        Log.v(TAG, "Posting '" + body + "' to " + url);
        byte[] bytes = body.getBytes();
        
        HttpURLConnection conn = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setUseCaches(false);
            conn.setFixedLengthStreamingMode(bytes.length);
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type","application/json");//"application/x-www-form-urlencoded;charset=UTF-8");
            // post a request.
            
            OutputStream out = conn.getOutputStream();
            
            out.write(bytes);

            out.close();
            // handle the response.
            for (int i = 1; i <= MAX_ATTEMPTS; i++) {
            try
            {
            	int status=200;
            	status = conn.getResponseCode();
            if (status != 200) {
              throw new IOException("Post failed with error code " + status);
            }
            break;
            }catch(java.io.EOFException e){}
            }
            
        } finally {
            if (conn != null) {
                conn.disconnect();
            }
        }
      }
}
