package com.example.gsoc_example_connect4;

import java.util.concurrent.atomic.AtomicInteger;

import android.os.AsyncTask;
import android.os.Bundle;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.GridView;

import com.example.gsoc_example_connect4.R;
import com.google.android.gms.gcm.GoogleCloudMessaging;

import static com.example.gsoc_example_connect4.CommonUtilities.DISPLAY_MESSAGE_ACTION;
import static com.example.gsoc_example_connect4.CommonUtilities.displayMessage;

public class MainActivity extends Activity {

	public static final String EXTRA_MESSAGE = "message";
    public static final String PROPERTY_REG_ID = "registration_id";
    public static final String PROPERTY_ON_SERVER_EXPIRATION_TIME = "onServerExpirationTimeMs";
    AtomicInteger msgId = new AtomicInteger();
    
    // Default lifespan (7 days) of a reservation until it is considered expired.
    public static final long REGISTRATION_EXPIRY_TIME_MS = 1000 * 3600 * 24 * 7;

    // Tag used on log messages.
    static final String TAG = "GSoC-Example";

    GoogleCloudMessaging gcm;
    
    SharedPreferences prefs;
    Context context;

    String regid,user,password;
    Boolean registered;
    AlertDialog dialog;
    
    Board board;
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
           
        registerReceiver(mHandleMessageReceiver,
                new IntentFilter(DISPLAY_MESSAGE_ACTION));
        
        prefs = getSharedPreferences(MainActivity.class.getSimpleName(),Context.MODE_PRIVATE);
        
        registered = prefs.getBoolean("registered", false);
        user = prefs.getString("user","");
        password = prefs.getString("password","");
        context = getApplicationContext();
        regid = getRegistrationId(context);
        
        if(!registered || regid == ""){
            Intent intent = new Intent(context, Register.class);
            startActivityForResult(intent,1000);
        }
        gcm = GoogleCloudMessaging.getInstance(this);
        
        
        board = new Board();
        
        GridView gridviewBack = (GridView) findViewById(R.id.gridviewBack);
        gridviewBack.setAdapter(new ImageAdapterBack(this,board));
        GridView gridviewFront = (GridView) findViewById(R.id.gridviewFront);
        gridviewFront.setAdapter(new ImageAdapter(this));

    }
    
    @Override
    protected void onDestroy() {
        unregisterReceiver(mHandleMessageReceiver);
        super.onDestroy();
    }
    
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu, this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.activity_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch(item.getItemId()) {
            //Show some info about this example.
            case R.id.options_information:
                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                builder.setMessage(R.string.info_message)
                       .setTitle(R.string.info_title)
                	   .setNeutralButton(R.string.close, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        ;
                    }
                });
                dialog = builder.create();
                dialog.show();
                return true;
                
            case R.id.options_settings:
            	Intent intent = new Intent(this, SettingsActivity.class);
				startActivity(intent);
				return true;
            //Close the app.
            case R.id.options_exit:
                finish();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }
    
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    	super.onActivityResult(requestCode, resultCode, data);
    	//Returning from the register activity.
    	if(requestCode == 1000)
    		if(resultCode == RESULT_OK){
    			user = data.getStringExtra("USER");
    			password = data.getStringExtra("PASSWORD");
    			regid = data.getStringExtra("REGID");
    			SharedPreferences.Editor editor = prefs.edit();
    			editor.putString("user", user);
    			editor.putString("password", password);
    			editor.putString("user", user);
    			editor.putString("password", password);
    			registered = prefs.getBoolean("registered", false);
    			// Commit the edits!
    			editor.commit();
    		}
    }
        
    
    // Gets the current registration id for application on GCM service.
    // If result is empty, the registration has failed.
    private String getRegistrationId(Context context) {
        String registrationId = prefs.getString(PROPERTY_REG_ID, "");
        if (registrationId.length() == 0) {
            Log.v(TAG, "Registration not found.");
            return "";
        }
        // check if registration expired.
        if (isRegistrationExpired()) {
            Log.v(TAG, "registration expired.");
            return "";
        }
        return registrationId;
    }
    
    // Checks if the registration has expired.
    // To avoid the scenario where the device sends the registration to the
    // server but the server loses it, the app developer may choose to re-register
    // after REGISTRATION_EXPIRY_TIME_MS.
    // return true if the registration has expired.
    private boolean isRegistrationExpired() {
        // checks if the information is not stale
        long expirationTime = prefs.getLong(PROPERTY_ON_SERVER_EXPIRATION_TIME, -1);
        return System.currentTimeMillis() > expirationTime;
    }
    
    
    // To Receive the messages to be shown in the text view.
    private final BroadcastReceiver mHandleMessageReceiver =
            new BroadcastReceiver() {
        
        @Override
        public void onReceive(final Context context, Intent intent) {
            ;
        }
    };
    
    public void sendMessage(View view) {
    	String message = "";
    	context = this;
    	if(registered){
    		displayMessage(context,"Message: " + message);
    		new AsyncTask<String, Void, Void>() {
    			@Override
    			protected Void doInBackground(String... parameters) {
    				ServerUtilities.sendMsgToServer(context,regid,user,password,parameters[0],msgId);
    				return null;
    			}
    		}.execute(message,null,null);
        }
    	else 
    		displayMessage(this,"You have to be registered to send messages.");
    }
    
}
