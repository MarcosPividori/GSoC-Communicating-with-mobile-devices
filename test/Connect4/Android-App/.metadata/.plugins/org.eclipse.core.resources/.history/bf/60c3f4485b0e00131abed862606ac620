package com.example.gsoc_example_connect4;

import static com.example.gsoc_example_connect4.CommonUtilities.SENDER_ID;
import static com.example.gsoc_example_connect4.MainActivity.PROPERTY_REG_ID;
import static com.example.gsoc_example_connect4.MainActivity.PROPERTY_ON_SERVER_EXPIRATION_TIME;
import static com.example.gsoc_example_connect4.MainActivity.REGISTRATION_EXPIRY_TIME_MS;

import java.io.IOException;
import java.sql.Timestamp;

import com.example.gsoc_example_connect4.R;
import com.google.android.gms.gcm.GoogleCloudMessaging;

import android.app.Activity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.EditText;
import android.widget.TextView;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;

// Activity to register user, password and server_url where the device should register.
public class Register extends Activity {
	
	private String mUser;
	private String mPassword;
	private View mRegistrationGCMView;
	private TextView mregistrationGCMMessageView;

	// UI references.
	private EditText mUserView;
	private EditText mPasswordView;
	
    GoogleCloudMessaging gcm;
    String regid,user,password;
    SharedPreferences prefs;
    
    Context context;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_register);
		
		context = getApplicationContext();
		prefs = getSharedPreferences(MainActivity.class.getSimpleName(),Context.MODE_PRIVATE);
		regid = prefs.getString(PROPERTY_REG_ID, "");

		mRegistrationGCMView = findViewById(R.id.registrationGCM_status);
		mregistrationGCMMessageView= (TextView) findViewById(R.id.registrationGCMmessage);
		
		if (regid.length() == 0) {
    		registerBackground();
    	}else{
    		askForUserAndPassword();
    	}
		
		gcm = GoogleCloudMessaging.getInstance(this);
	}

	public void askForUserAndPassword() {
		
		mUserView.setVisibility(View.VISIBLE);
		mPasswordView.setVisibility(View.VISIBLE);
		
		mUserView = (EditText) findViewById(R.id.user);
		mUserView.setText(mUser);

		mPasswordView = (EditText) findViewById(R.id.password);
		mPasswordView
				.setOnEditorActionListener(new TextView.OnEditorActionListener() {
					@Override
					public boolean onEditorAction(TextView textView, int id,
							KeyEvent keyEvent) {
						if (id == R.id.login || id == EditorInfo.IME_NULL) {
							attemptLogin();
							return true;
						}
						return false;
					}
				});

		findViewById(R.id.sign_in_button).setOnClickListener(
				new View.OnClickListener() {
					@Override
					public void onClick(View view) {
						attemptLogin();
					}
				});
	}
	
	// Intent to register the specified account, if there is any error, (invalid user, field required, etc.)
	// the errors are shown and the registration does not success.
	public void attemptLogin() {

		// Reset errors.
		mUserView.setError(null);
		mPasswordView.setError(null);

		// Save values.
		mUser = mUserView.getText().toString();
		mPassword = mPasswordView.getText().toString();

		boolean cancel = false;
		View focusView = null;

		// Check for a valid password.
		if (TextUtils.isEmpty(mPassword)) {
			mPasswordView.setError(getString(R.string.error_field_required));
			focusView = mPasswordView;
			cancel = true;
		} else if (mPassword.length() < 4) {
			mPasswordView.setError(getString(R.string.error_invalid_password));
			focusView = mPasswordView;
			cancel = true;
		}

		// Check for a valid user.
		if (TextUtils.isEmpty(mUser)) {
			mUserView.setError(getString(R.string.error_field_required));
			focusView = mUserView;
			cancel = true;
		} else if (mUser.length() < 4) {
			mUserView.setError(getString(R.string.error_invalid_user));
			focusView = mUserView;
			cancel = true;
		}
				
		if (cancel) {
			// There is an error, so registration does not success and focus on the error.
			focusView.requestFocus();
		} else {
			// Send information to Main Activity.
			Intent i = getIntent();
			i.putExtra("USER",mUser);
			i.putExtra("PASSWORD",mPassword);
			setResult(RESULT_OK,i);
			finish();
		}
	}
	
	
	// Registers the application with GCM servers asynchronously.
    // Stores the registration id, and expiration time in the 
    // application's shared preferences.
    private void registerBackground() {
        new AsyncTask<Void,Void,Boolean>() {
            @Override
            protected Boolean doInBackground(Void... params) {
                String msg = "";
                try {
                    if (gcm == null) {
                        gcm = GoogleCloudMessaging.getInstance(context);
                    }
                    regid = gcm.register(SENDER_ID);
                    msg = "Device registered:\nRegistration id = " + regid;
                    
                    // Save the regid - no need to register again.
                    setRegistrationId(context, regid);

                    // Send RegId to the Server.
                    user = prefs.getString("user","");
                    if (user.length() == 0) {//Not registered
                        Intent intent = new Intent(context, Register.class);
                        startActivityForResult(intent,1000);
                    }
                    else
                    	sendInfoToServer();
                } catch (IOException ex) {
                	return false;
                }
                return true;
            }

            @Override
            protected void onPostExecute(Boolean result) {
                ;
            }
        }.execute(null, null, null);
    }
    
    private void setRegistrationId(Context context, String regId) {
        SharedPreferences.Editor editor = prefs.edit();
        editor.putString(PROPERTY_REG_ID, regId);

        long expirationTime = System.currentTimeMillis() + REGISTRATION_EXPIRY_TIME_MS;
        editor.putLong(PROPERTY_ON_SERVER_EXPIRATION_TIME, expirationTime);
        editor.commit();
    } 

}